{"version":3,"sources":["components/PostContent.tsx","components/PostsList.tsx","utils/fetchClient.ts","utils/requests.tsx","components/CommentContent.tsx","components/Notifications/AddingError.tsx","components/Notifications/DeleteError.tsx","components/Notifications/ErrorLoadingComments.tsx","components/Notifications/NoCommentsYet.tsx","components/HandleErrorsComponent.tsx","components/Loader/Loader.tsx","utils/validateEmail.tsx","components/Notifications/ErrorIcon.tsx","components/formFields/NameField.tsx","components/formFields/EmailField.tsx","components/formFields/CommentField.tsx","components/formFields/SubmitButton.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","components/Notifications/LoadingError.tsx","components/Notifications/NoSelectedUser.tsx","components/Notifications/NoPostsYet.tsx","App.tsx","index.tsx"],"names":["Button","PostContent","post","setSelectedPost","selectedPost","prevPost","id","title","isPostSelected","el","className","type","classNames","onClick","current","handleOnClick","Closetext","OpenText","PostsList","posts","useRef","useEffect","map","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","getComments","postId","postComment","newComment","a","deleteComment","commentId","CommentContent","comment","setComments","setIsDeleteError","commentsBeforeFilter","setCommentsBeforeFilter","email","name","handleDeleteComment","prevComments","filter","href","AddingError","DeleteError","ErrorLoadingComments","NoCommentsYet","HandleErrorsComponent","isLoadingError","isDeleteError","isAddingError","isNoComments","isLoader","isCommentsError","errorPairs","condition","errorComponent","errorPair","Loader","validateEmail","match","ErrorIcon","NameField","isNameEmptyError","setIsNameEmptyError","setName","htmlFor","placeholder","value","onChange","event","target","EmailField","isEmailEmptyError","isEmailValid","setEmail","setIsEmailEmptyError","setIsEmailValid","CommentField","isCommentEmptyError","setComment","setIsCommentEmptyError","SubmitButton","isOnSubmitLoading","NewCommentForm","setIsAddingError","useState","setIsOnSubmitLoading","Date","setErrorIfEmpty","setter","handleOnSubmit","preventDefault","b","c","prev","onSubmit","PostDetails","comments","setIsLoader","setisLoadingError","areCommentsLoaded","setAreCommentsLoaded","isCommentFormShown","setIsCommentFormShown","length","isCommentContentRendered","fetchData","UserSelector","users","setSelectedUserId","selectedUserId","isMenuDropped","setIsMenuDropped","dropDownElement","selectedUserName","find","x","handleOnBlur","contains","document","addEventListener","removeEventListener","user","selectUser","ref","role","LoadingError","NoSelectedUser","NoPostsYet","App","setUsers","setPosts","isLoadingCompleted","setIsLoadingCompleted","isLoadingErorr","setisLoadingErorr","noPostsCondition","fetchUsers","fetchPosts","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1e00f854.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { FC } from 'react';\nimport { Post } from '../types/Post';\n\nenum Button {\n  OpenText = 'Open',\n  Closetext = 'Close',\n}\n\ntype Props = {\n  post: Post,\n  setSelectedPost: (arg: Post | null) => void,\n  selectedPost: Post | null,\n  prevPost: React.MutableRefObject<Post | null>,\n};\n\nexport const PostContent: FC<Props> = ({\n  post,\n  setSelectedPost,\n  selectedPost,\n  prevPost,\n}) => {\n  const { id, title } = post;\n  const isPostSelected = (el: Post) => el.id === selectedPost?.id;\n\n  const handleOnClick = () => {\n    if (prevPost && prevPost.current?.id === post.id) {\n      setSelectedPost(null);\n    } else {\n      setSelectedPost(post);\n    }\n  };\n\n  return (\n    <tr data-cy=\"Post\" key={id}>\n      <td data-cy=\"PostId\">{id}</td>\n\n      <td data-cy=\"PostTitle\">\n        {title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={classNames(\n            'button',\n            'is-link',\n            { 'is-light': !(isPostSelected(post)) },\n          )}\n          onClick={() => handleOnClick()}\n        >\n          {isPostSelected(post) ? Button.Closetext : Button.OpenText}\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React, { useEffect, useRef } from 'react';\nimport { Post } from '../types/Post';\nimport { PostContent } from './PostContent';\n\ntype Props = {\n  posts: Post[],\n  selectedPost: Post | null,\n  setSelectedPost: (arg: Post | null) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n}) => {\n  const prevPost = useRef<Post | null>(null);\n\n  useEffect(() => {\n    prevPost.current = selectedPost;\n  }, [selectedPost]);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => {\n            return (\n              <PostContent\n                key={post.id}\n                post={post}\n                selectedPost={selectedPost}\n                setSelectedPost={setSelectedPost}\n                prevPost={prevPost}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from './fetchClient';\n\nexport const getPosts = (userId: number): Promise<Post[]> => {\n  return client.get(`/posts?userId=${userId}`);\n};\n\nexport const getUsers = (): Promise<User[]> => {\n  return client.get('/users');\n};\n\nexport const getComments = (postId: number): Promise<Comment[]> => {\n  return client.get(`/comments?postId=${postId}`);\n};\n\nexport const postComment = async (newComment: Comment) => {\n  return client.post('/comments', newComment);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import { FC } from 'react';\nimport { Comment } from '../types/Comment';\nimport { deleteComment } from '../utils/requests';\n\ntype Props = {\n  comment: Comment,\n  setComments: React.Dispatch<React.SetStateAction<Comment[] | []>>,\n  setIsDeleteError: React.Dispatch<React.SetStateAction<boolean>>,\n  commentsBeforeFilter: Comment[],\n  setCommentsBeforeFilter: React.Dispatch<React.SetStateAction<Comment[]>>,\n};\n\nexport const CommentContent: FC<Props> = ({\n  comment,\n  setComments,\n  setIsDeleteError,\n  commentsBeforeFilter,\n  setCommentsBeforeFilter,\n}) => {\n  const {\n    email, body, name, id,\n  } = comment;\n\n  const handleDeleteComment = async (commentId: number) => {\n    try {\n      setComments((prevComments) => prevComments\n        .filter(el => el.id !== commentId));\n\n      await deleteComment(commentId);\n\n      setCommentsBeforeFilter((prevComments) => prevComments\n        .filter(el => el.id !== commentId));\n    } catch {\n      setIsDeleteError(true);\n      setComments(commentsBeforeFilter);\n    }\n  };\n\n  return (\n    <article className=\"message is-small\" data-cy=\"Comment\">\n      <div className=\"message-header\">\n        <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n          {name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={() => handleDeleteComment(id)}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {body}\n      </div>\n    </article>\n  );\n};\n","export const AddingError = () => (\n  <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n    Unable to add comment, try agagin later\n  </div>\n);\n","export const DeleteError = () => (\n  <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n    Unable to delete comment, try agagin later\n  </div>\n);\n","export const ErrorLoadingComments = () => (\n  <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n    Something went wrong\n  </div>\n);\n","export const NoCommentsYet = () => (\n  <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n    No comments yet\n  </p>\n);\n","import { FC } from 'react';\nimport { AddingError } from './Notifications/AddingError';\nimport { DeleteError } from './Notifications/DeleteError';\nimport { ErrorLoadingComments } from './Notifications/ErrorLoadingComments';\nimport { NoCommentsYet } from './Notifications/NoCommentsYet';\n\ntype Props = {\n  isLoadingError: boolean,\n  isDeleteError: boolean,\n  isAddingError: boolean,\n  isNoComments: boolean,\n  isLoader: boolean,\n};\n\nexport const HandleErrorsComponent: FC<Props> = ({\n  isLoadingError,\n  isDeleteError,\n  isAddingError,\n  isNoComments,\n  isLoader,\n}) => {\n  const isCommentsError = isNoComments && !isLoader;\n\n  const errorPairs = [\n    {\n      condition: isLoadingError,\n      errorComponent: <ErrorLoadingComments key={1} />,\n    },\n    {\n      condition: isDeleteError,\n      errorComponent: <DeleteError key={2} />,\n    },\n    {\n      condition: isAddingError,\n      errorComponent: <AddingError key={3} />,\n    },\n    {\n      condition: isCommentsError,\n      errorComponent: <NoCommentsYet key={4} />,\n    },\n  ];\n\n  return (\n    <>\n      {errorPairs\n        .map(errorPair => errorPair.condition && errorPair.errorComponent)}\n    </>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable no-useless-escape */\n/* eslint-disable max-len */\nexport const validateEmail = (email: string) => {\n  return email.match(\n    /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n  );\n};\n","export const ErrorIcon = () => (\n  <span\n    className=\"icon is-small is-right has-text-danger\"\n    data-cy=\"ErrorIcon\"\n  >\n    <i className=\"fas fa-exclamation-triangle\" />\n  </span>\n);\n","import classNames from 'classnames';\nimport { FC } from 'react';\nimport { ErrorIcon } from '../Notifications/ErrorIcon';\n\ntype Props = {\n  isNameEmptyError: boolean,\n  setIsNameEmptyError: React.Dispatch<React.SetStateAction<boolean>>,\n  name: string,\n  setName: React.Dispatch<React.SetStateAction<string>>,\n};\n\nexport const NameField: FC<Props> = ({\n  isNameEmptyError,\n  setIsNameEmptyError,\n  name,\n  setName,\n}) => {\n  const onNameChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n    setIsNameEmptyError(false);\n  };\n\n  return (\n    <div className=\"field\" data-cy=\"NameField\">\n      <label className=\"label\" htmlFor=\"comment-author-name\">\n        Author Name\n      </label>\n\n      <div className=\"control has-icons-left has-icons-right\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"comment-author-name\"\n          placeholder=\"Name Surname\"\n          className={classNames(\n            'input',\n            { 'is-danger': isNameEmptyError },\n          )}\n          value={name}\n          onChange={onNameChangeHandler}\n        />\n\n        <span className=\"icon is-small is-left\">\n          <i className=\"fas fa-user\" />\n        </span>\n\n        {isNameEmptyError && (\n          <ErrorIcon />\n        )}\n      </div>\n\n      {isNameEmptyError && (\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          Name is required\n        </p>\n      )}\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport { FC } from 'react';\nimport { ErrorIcon } from '../Notifications/ErrorIcon';\n\ntype Props = {\n  email: string,\n  isEmailEmptyError: boolean,\n  isEmailValid: boolean,\n  setEmail: React.Dispatch<React.SetStateAction<string>>\n  setIsEmailEmptyError: React.Dispatch<React.SetStateAction<boolean>>,\n  setIsEmailValid: React.Dispatch<React.SetStateAction<boolean>>,\n};\n\nexport const EmailField: FC<Props> = ({\n  email,\n  isEmailEmptyError,\n  isEmailValid,\n  setEmail,\n  setIsEmailEmptyError,\n  setIsEmailValid,\n}) => {\n  const onEmailChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.target.value);\n    setIsEmailEmptyError(false);\n    setIsEmailValid(true);\n  };\n\n  return (\n    <div className=\"field\" data-cy=\"EmailField\">\n      <label className=\"label\" htmlFor=\"comment-author-email\">\n        Author Email\n      </label>\n\n      <div className=\"control has-icons-left has-icons-right\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          id=\"comment-author-email\"\n          placeholder=\"email@test.com\"\n          className={classNames(\n            'input',\n            { 'is-danger': isEmailEmptyError || !isEmailValid },\n          )}\n          value={email}\n          onChange={onEmailChangeHandler}\n        />\n\n        <span className=\"icon is-small is-left\">\n          <i className=\"fas fa-envelope\" />\n        </span>\n\n        {(isEmailEmptyError || !isEmailValid) && (\n          <ErrorIcon />\n        )}\n      </div>\n\n      {isEmailEmptyError && (\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          Email is required\n        </p>\n      )}\n\n      {!isEmailEmptyError && !isEmailValid && (\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          Email is not valid\n        </p>\n      )}\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport { FC } from 'react';\n\ntype Props = {\n  isCommentEmptyError: boolean,\n  setComment: React.Dispatch<React.SetStateAction<string>>,\n  comment: string,\n  setIsCommentEmptyError: React.Dispatch<React.SetStateAction<boolean>>,\n};\n\nexport const CommentField: FC<Props> = ({\n  isCommentEmptyError,\n  comment,\n  setComment,\n  setIsCommentEmptyError,\n}) => {\n  const onCommentChangeHandler\n  = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setComment(event.target.value);\n    setIsCommentEmptyError(false);\n  };\n\n  return (\n    <div className=\"field\" data-cy=\"BodyField\">\n      <label className=\"label\" htmlFor=\"comment-body\">\n        Comment Text\n      </label>\n\n      <div className=\"control\">\n        <textarea\n          id=\"comment-body\"\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className={classNames(\n            'textarea',\n            { 'is-danger': isCommentEmptyError },\n          )}\n          value={comment}\n          onChange={onCommentChangeHandler}\n        />\n      </div>\n\n      {isCommentEmptyError && (\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          Enter some text\n        </p>\n      )}\n\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport { FC } from 'react';\n\ntype Props = {\n  isOnSubmitLoading: boolean,\n};\n\nexport const SubmitButton: FC<Props> = ({ isOnSubmitLoading }) => {\n  return (\n    <div className=\"control\">\n      <button\n        type=\"submit\"\n        className={classNames(\n          'button',\n          'is-link',\n          { 'is-loading': isOnSubmitLoading },\n        )}\n      >\n        Add\n      </button>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { postComment } from '../utils/requests';\nimport { Comment } from '../types/Comment';\nimport { validateEmail } from '../utils/validateEmail';\nimport { NameField } from './formFields/NameField';\nimport { EmailField } from './formFields/EmailField';\nimport { CommentField } from './formFields/CommentField';\nimport { SubmitButton } from './formFields/SubmitButton';\n\ntype Props = {\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n  setCommentsBeforeFilter: React.Dispatch<React.SetStateAction<Comment[]>>,\n  setIsAddingError: React.Dispatch<React.SetStateAction<boolean>>,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  setComments,\n  setCommentsBeforeFilter,\n  setIsAddingError,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n  const [isOnSubmitLoading, setIsOnSubmitLoading] = useState(false);\n  const [isNameEmptyError, setIsNameEmptyError] = useState(false);\n  const [isEmailEmptyError, setIsEmailEmptyError] = useState(false);\n  const [isCommentEmptyError, setIsCommentEmptyError] = useState(false);\n  const [isEmailValid, setIsEmailValid] = useState(true);\n\n  const newComment = {\n    id: +new Date(),\n    postId: +new Date(),\n    name,\n    email,\n    body: comment,\n  };\n\n  const handleResetForm = () => {\n    setName('');\n    setEmail('');\n    setComment('');\n  };\n\n  const checkIsError = (a: string, b: string, c: string) => {\n    return a && b && c;\n  };\n\n  const setErrorIfEmpty = (\n    value: string,\n    setter: React.Dispatch<React.SetStateAction<boolean>>,\n  ) => {\n    if (!value) {\n      setter(true);\n    }\n  };\n\n  const handleOnSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setErrorIfEmpty(name, setIsNameEmptyError);\n    setErrorIfEmpty(email, setIsEmailEmptyError);\n    setErrorIfEmpty(comment, setIsCommentEmptyError);\n\n    if (!validateEmail(email)) {\n      setIsEmailValid(false);\n\n      return;\n    }\n\n    if (checkIsError(name, email, comment)) {\n      setIsOnSubmitLoading(true);\n\n      try {\n        await postComment(newComment);\n        setComments((prev: Comment[]): Comment[] => [...prev, newComment]);\n        setCommentsBeforeFilter(\n          (prev: Comment[]): Comment[] => [...prev, newComment],\n        );\n\n        setIsOnSubmitLoading(false);\n      } catch {\n        setIsAddingError(true);\n        setIsOnSubmitLoading(false);\n      } finally {\n        setComment('');\n        setIsOnSubmitLoading(false);\n      }\n    }\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleOnSubmit}\n    >\n      <NameField\n        isNameEmptyError={isNameEmptyError}\n        setIsNameEmptyError={setIsNameEmptyError}\n        name={name}\n        setName={setName}\n      />\n\n      <EmailField\n        isEmailValid={isEmailValid}\n        setIsEmailValid={setIsEmailValid}\n        setIsEmailEmptyError={setIsEmailEmptyError}\n        setEmail={setEmail}\n        isEmailEmptyError={isEmailEmptyError}\n        email={email}\n      />\n\n      <CommentField\n        isCommentEmptyError={isCommentEmptyError}\n        comment={comment}\n        setComment={setComment}\n        setIsCommentEmptyError={setIsCommentEmptyError}\n      />\n\n      <div className=\"field is-grouped\">\n        <SubmitButton isOnSubmitLoading={isOnSubmitLoading} />\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleResetForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { getComments } from '../utils/requests';\nimport { CommentContent } from './CommentContent';\nimport { HandleErrorsComponent } from './HandleErrorsComponent';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  selectedPost: Post,\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPost }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoader, setIsLoader] = useState(false);\n  const [isLoadingError, setisLoadingError] = useState(false);\n  const [areCommentsLoaded, setAreCommentsLoaded] = useState(false);\n  const [isCommentFormShown, setIsCommentFormShown] = useState(false);\n  const [isDeleteError, setIsDeleteError] = useState(false);\n  const [commentsBeforeFilter, setCommentsBeforeFilter] = useState(comments);\n  const [isAddingError, setIsAddingError] = useState(false);\n\n  const isNoComments = areCommentsLoaded\n  && comments\n  && comments.length < 1;\n  const postId = selectedPost?.id;\n  const isCommentContentRendered = !!comments.length && !isLoader;\n\n  useEffect(() => {\n    setisLoadingError(false);\n    setIsLoader(true);\n    setIsCommentFormShown(false);\n\n    const fetchData = async () => {\n      try {\n        const data: Comment[] = await getComments(postId);\n\n        setComments(data);\n        setAreCommentsLoaded(true);\n      } catch (error) {\n        setisLoadingError(true);\n        setIsLoader(false);\n        setAreCommentsLoaded(true);\n      } finally {\n        setAreCommentsLoaded(true);\n        setIsLoader(false);\n      }\n    };\n\n    fetchData();\n  }, [selectedPost]);\n\n  const { id, title, body } = selectedPost;\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <HandleErrorsComponent\n          isLoadingError={isLoadingError}\n          isDeleteError={isDeleteError}\n          isAddingError={isAddingError}\n          isNoComments={isNoComments}\n          isLoader={isLoader}\n        />\n\n        {!isLoadingError && (\n          <div className=\"block\">\n            {isLoader && (\n              <Loader />\n            )}\n\n            {!isNoComments && !isLoader && (\n              <p className=\"title is-4\">Comments:</p>\n            )}\n\n            {isCommentContentRendered && comments.map((comment) => {\n              return (\n                <CommentContent\n                  key={comment.id}\n                  comment={comment}\n                  setComments={setComments}\n                  setIsDeleteError={setIsDeleteError}\n                  commentsBeforeFilter={commentsBeforeFilter}\n                  setCommentsBeforeFilter={setCommentsBeforeFilter}\n                />\n              );\n            })}\n\n            {!isLoader && !isCommentFormShown && (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={() => setIsCommentFormShown(true)}\n              >\n                Write a comment\n              </button>\n            )}\n          </div>\n        )}\n\n        {isCommentFormShown && (\n          <NewCommentForm\n            setComments={setComments}\n            setCommentsBeforeFilter={setCommentsBeforeFilter}\n            setIsAddingError={setIsAddingError}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport { useEffect, useRef, useState } from 'react';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  setSelectedUserId: React.Dispatch<React.SetStateAction<number>>,\n  selectedUserId: number,\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  setSelectedUserId,\n  selectedUserId,\n  setSelectedPost,\n}) => {\n  const [isMenuDropped, setIsMenuDropped] = useState(false);\n  const dropDownElement = useRef<HTMLDivElement | null>(null);\n\n  const selectUser = (user: User) => {\n    if (user.id !== selectedUserId) {\n      setSelectedUserId(user.id);\n    }\n  };\n\n  const selectedUserName = users.find(x => x.id === selectedUserId)?.name;\n\n  const handleOnBlur = (event: MouseEvent) => {\n    if (!dropDownElement.current?.contains(event.target as HTMLElement)) {\n      setIsMenuDropped(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleOnBlur);\n\n    return () => {\n      document.removeEventListener('click', handleOnBlur);\n    };\n  });\n\n  const handleOnClick = (user: User) => {\n    selectUser(user);\n    setSelectedPost(null);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': isMenuDropped },\n      )}\n    >\n      <div\n        className=\"dropdown-trigger\"\n        ref={dropDownElement}\n      >\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsMenuDropped(prev => !prev)}\n        >\n\n          <span>\n            {selectedUserId === -1\n              ? 'Choose a user'\n              : selectedUserName}\n\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\">\n          {users.map((user) => {\n            return (\n              <a\n                key={user.id}\n                href={`#user-${user.id}`}\n                className={classNames(\n                  'dropdown-item',\n                  { 'is-active': selectedUserId === user.id },\n                )}\n                onClick={() => handleOnClick(user)}\n              >\n                {user.name}\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const LoadingError = () => {\n  return (\n    <div\n      className=\"notification is-danger\"\n      data-cy=\"PostsLoadingError\"\n    >\n      Something went wrong!\n    </div>\n  );\n};\n","export const NoSelectedUser = () => {\n  return (\n    <p data-cy=\"NoSelectedUser\">\n      No user selected\n    </p>\n  );\n};\n","export const NoPostsYet = () => {\n  return (\n    <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n      No posts yet\n    </div>\n  );\n};\n","/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { LoadingError } from './components/Notifications/LoadingError';\nimport { NoSelectedUser } from './components/Notifications/NoSelectedUser';\nimport { NoPostsYet } from './components/Notifications/NoPostsYet';\nimport { Post } from './types/Post';\nimport { getUsers, getPosts } from './utils/requests';\n\nexport const App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(-1);\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoader, setIsLoader] = useState(false);\n  const [isLoadingCompleted, setIsLoadingCompleted] = useState(false);\n  const [isLoadingErorr, setisLoadingErorr] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const noPostsCondition = isLoadingCompleted\n  && !isLoadingErorr\n  && posts.length < 1;\n\n  const fetchUsers = async (): Promise<void> => {\n    try {\n      const data: User[] = await getUsers();\n\n      setUsers(data);\n    } catch (error) {\n      setisLoadingErorr(true);\n    }\n  };\n\n  const fetchPosts = async (): Promise<void> => {\n    try {\n      const data: Post[] = await getPosts(selectedUserId);\n\n      setPosts(data);\n      setIsLoader(false);\n      setIsLoadingCompleted(true);\n    } catch (error) {\n      setisLoadingErorr(true);\n      setIsLoadingCompleted(true);\n      setIsLoader(false);\n    } finally {\n      setIsLoadingCompleted(true);\n      setIsLoader(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  useEffect(() => {\n    if (selectedUserId > -1) {\n      setisLoadingErorr(false);\n      setIsLoader(true);\n      setIsLoadingCompleted(false);\n\n      fetchPosts();\n    }\n  }, [selectedUserId]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                {users && (\n                  <UserSelector\n                    users={users}\n                    selectedUserId={selectedUserId}\n                    setSelectedUserId={setSelectedUserId}\n                    setSelectedPost={setSelectedPost}\n                  />\n                )}\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {selectedUserId < 0 && (\n                  <NoSelectedUser />\n                )}\n\n                {isLoader && (\n                  <Loader />\n                )}\n\n                {isLoadingErorr && (\n                  <LoadingError />\n                )}\n\n                {noPostsCondition && (\n                  <NoPostsYet />\n                )}\n\n                {!!posts.length && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails selectedPost={selectedPost} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}